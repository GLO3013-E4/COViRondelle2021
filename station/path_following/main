#!/usr/bin/env python3
import json
import math

import rospy
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path
from std_msgs.msg import String

from path_following.config import NODE_SIZE
from path_following.destination import Destination
from path_following.movement_mode import MovementMode
from path_following.vectorizer import Vectorizer


class PathFollower:
    def __init__(self):
        self.robot = None
        self.path = []
        self.node_size = NODE_SIZE
        self.vectorizer = Vectorizer(minimize=True)
        self.vectorizer.set_destination(Destination.OTHER)
        self.mode = "PUCK"
        self.rate = rospy.Rate(20)
        self.angle_rate = rospy.Rate(1)
        self.cm_to_pixel = self.vectorizer.cm_to_pixel

        self.pub = rospy.Publisher('movement_vectors_string', String, queue_size=1)
        self.pub_angle = rospy.Publisher('angle', String, queue_size=1)
        rospy.Subscriber('robot', String, self.callback_robot, queue_size=1)
        rospy.Subscriber('move_base_simple/goal', PoseStamped, self.callback_goal, queue_size=1)
        rospy.Subscriber('path', Path, self.callback_path,queue_size=1)
        rospy.Subscriber('following_mode',String, self.callback_mode,queue_size=1)

    def callback_mode(self, data):
        self.mode = data.data

    def callback_robot(self, data):
        robot_dict = json.loads(data.data)
        self.robot_dict = robot_dict

        self.vectorizer.set_robot_position(robot_dict["robot"])
        self.vectorizer.set_robot_angle(robot_dict["angle"])

    def callback_goal(self, data):
        self.goal = (data.pose.position.x, data.pose.position.y)
        self.vectorizer.set_goal((data.pose.position.x, data.pose.position.y))

    def callback_path(self, data):
        nodes = []
        for coordinate in data.poses:
            x = coordinate.pose.position.x
            y = coordinate.pose.position.y
            nodes.append((x, y))

        self.vectorizer.set_path(nodes)


        if self.mode == "PUCK":
            while self.distance(self.robot_dict["prehenseur"], self.goal) >= 200:
                vectors = self.vectorizer.path_to_vectors()
                try:
                    distance, angle, _ = vectors[0]
                    #distance = min(70, distance)
                    distance = max(min(self.distance(self.robot_dict['prehenseur'], self.goal) - 200, 70, distance), 0)
                    published_vector = (distance/self.cm_to_pixel, self.convert_angle_to_driver_angle(angle), MovementMode.GRIP.value)
                except IndexError:
                    rospy.logerr("Could not follow path")
                    break

                self.pub.publish(json.dumps(published_vector))
                self.rate.sleep()

            angle = self.vectorizer.find_goal_angle(self.goal[1] - self.robot_dict["robot"][1], self.goal[0] - self.robot_dict["robot"][0])

            while not(angle<=0.05 and angle >=-0.05):
                angle = self.vectorizer.find_goal_angle(self.goal[1] - self.robot_dict["robot"][1] , self.goal[0] - self.robot_dict["robot"][0])
                published_vector = (0, self.convert_angle_to_driver_angle(angle), MovementMode.GRIP.value)
                self.pub.publish(json.dumps(published_vector))
                self.angle_rate.sleep()

            self.pub.publish("FINISHED")
        elif self.mode == "RESISTANCE":
            while self.distance(self.robot_dict["robot"], self.goal) >= 200:
                vectors = self.vectorizer.path_to_vectors()
                try:
                    distance, angle, _ = vectors[0]
                    angle = angle - math.pi/2
                    #distance = min(70, distance)
                    distance = max(min(self.distance(self.robot_dict['robot'], self.goal) - 200, 70, distance), 0)
                    published_vector = (distance/self.cm_to_pixel, self.convert_angle_to_driver_angle(angle), MovementMode.OHMMETER.value)
                except IndexError:
                    rospy.logerr("Could not follow path")
                    break

                self.pub.publish(json.dumps(published_vector))
                self.rate.sleep()

            angle = self.vectorizer.find_goal_angle(self.goal[1] - self.robot_dict["robot"][1], self.goal[0] - self.robot_dict["robot"][0])
            angle -= math.pi/2

            while not(angle<=0.05 and angle >=-0.05):
                angle = self.vectorizer.find_goal_angle(self.goal[1] - self.robot_dict["robot"][1] , self.goal[0] - self.robot_dict["robot"][0])
                angle -= math.pi/2
                published_vector = (0, self.convert_angle_to_driver_angle(angle), MovementMode.OHMMETER.value)
                self.pub.publish(json.dumps(published_vector))
                self.angle_rate.sleep()

            self.pub.publish("FINISHED")
        elif self.mode == "CENTER":
            while self.distance(self.robot_dict["robot"], self.goal) >= 50:
                vectors = self.vectorizer.path_to_vectors()
                try:
                    distance, angle, _ = vectors[0]
                    distance = max(min(self.distance(self.robot_dict['robot'], self.goal) - 50, 70, distance), 0)
                    published_vector = (distance/self.cm_to_pixel, self.convert_angle_to_driver_angle(angle), MovementMode.GRIP.value)
                except IndexError:
                    rospy.logerr("Could not follow path")
                    break

                self.pub.publish(json.dumps(published_vector))
                self.rate.sleep()

            angle = -self.robot_dict["angle"]

            published_vector = (0, self.convert_angle_to_driver_angle(angle), MovementMode.GRIP.value)
            self.pub.publish(json.dumps(published_vector))
            self.angle_rate.sleep()

            self.pub.publish("FINISHED")


    def convert_angle_to_driver_angle(self, angle):
        angle = math.degrees(angle)

        if angle < 0:
            angle += 360
        return angle

    def distance(self, point1, point2):
        x1, y1 = point1
        x2, y2 = point2
        return math.sqrt(pow(x2-x1, 2) + pow(y2-y1, 2))


def path_follower():
    rospy.init_node('path_following', anonymous=True)

    PathFollower()


    rospy.spin()


if __name__ == '__main__':
    try:
        path_follower()
    except rospy.ROSInterruptException:
        pass
